/*
 * Copyright (C) 2017-2018 Dremio Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package exec.bit.reflection;

option java_package = "com.dremio.exec.proto";
option java_outer_classname = "ReflectionRPC";
option optimize_for = SPEED;
option java_generate_equals_and_hash = true;

import "ExecutionProtos.proto";
import "Coordination.proto";
import "UserBitShared.proto";

////// BitControl RPC ///////
enum RpcType {
  ACK = 1;

  // exec > coordinator
  REQ_REFLECTION_INFO = 2;
  RESP_REFLECTION_INFO = 3;
  REQ_REFRESH_INFO = 4;
  RESP_REFRESH_INFO = 5;
  REQ_DEPENDENCY_INFO = 6;
  RESP_DEPENDENCY_INFO = 7;
}

message ReflectionInfo {
 optional string reflection_id = 1;
 optional string name = 2;
 optional string type = 3;
 optional string status  = 4;
 optional string dataset = 5;
 optional string sortColumns = 6;
 optional string partitionColumns = 7;
 optional string distributionColumns = 8;
 optional string dimensions = 9;
 optional string measures = 10 [deprecated = true];
 optional string displayColumns = 11;
 optional string externalReflection = 12;
 optional int32 numFailures = 13 [default = 0];
 repeated exec.shared.MeasureColumn measure_columns = 14;
}

message ReflectionInfoResp {
  repeated ReflectionInfo reflectionInfo = 1;
}

message ReflectionInfoReq {
}

message RefreshInfo {
  optional string id = 1;
  optional string reflectionId = 2;
  optional int64 seriesId = 3;
  optional int64 created_at = 4;
  optional int64 modified_at = 5;
  optional string path = 6;
  optional string jobId = 7;
  optional int64 jobStart = 8;
  optional int64 jobEnd = 9;
  optional int64 inputBytes = 10;
  optional int64 inputRecords = 11;
  optional int64 outputBytes = 12;
  optional int64 outputRecords = 13;
  optional int64 footprint = 14 [default = 0];
  optional double originalCost = 15 [default = 1.0];
  optional int64 updateId = 16;
  optional string partition = 17; // nodes containing materialized data - array of strings
  optional int32 seriesOrdinal = 18 [default = 0]; // refresh order in its series, 0 for initial refresh
}

message RefreshInfoResp {
  repeated RefreshInfo refreshInfo = 1;
}

message RefreshInfoReq {
}

message DependencyInfo {
  optional string reflection_id = 1;
  optional string dependency_id = 2;
  optional string dependency_type = 3;
  optional string dependency_path = 4;
}

message DependencyInfoResp {
  repeated DependencyInfo dependencyInfo = 1;
}

message DependencyInfoReq {
}
